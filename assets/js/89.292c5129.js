(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{435:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"js-的执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-的执行顺序"}},[t._v("#")]),t._v(" JS 的执行顺序")]),t._v(" "),s("p",[t._v("先简单讲下整个执行顺序")]),t._v(" "),s("p",[t._v("1.我们所写的 js 代码在执行阶段前，会有个预加载过程，目的是建立当前 js 代码的执行环境，而这个执行环境就是上下文（context）。 2.这个上下文包含了 VO（Variable Object 变量声明对象）,AO（Active Object 动态变量对象）,scopeChain（作用域链）。 3.建立好上下文后，才会开始执行我们写的 js 代码。")]),t._v(" "),s("h2",{attrs:{id:"上下文-execution-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上下文-execution-context"}},[t._v("#")]),t._v(" 上下文(Execution Context)")]),t._v(" "),s("p",[t._v("通过上面我们可以直到，上下文就是每段代码的执行环境。")]),t._v(" "),s("blockquote",[s("p",[t._v("它分为三种类型： 1.全局级别的代码 - 这个是默认的代码运行环境，一旦代码被载入，引擎最先进入的就是这个环境。 2.函数级别的代码 - 当执行一个函数时，运行函数体中的代码。\n3.Eval 的代码 - 在 Eval 函数内运行的代码。")])]),t._v(" "),s("p",[t._v("先讲函数级别的上下文（执行环境）。")]),t._v(" "),s("p",[t._v("上下文建立的阶段： 1.建立 VO（Variable Object） 2.建立 AO（Active Object） 3.建立 scopeChain\n![在这里插入图片描述](./一篇了解 JS 的上下文(context)"),s("em",[t._v("js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客_files/20210523141303282.png)")]),t._v(" "),s("h2",{attrs:{id:"静态变量声明-variable-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态变量声明-variable-object"}},[t._v("#")]),t._v(" 静态变量声明（Variable Object）")]),t._v(" "),s("p",[t._v("我们看下面的代码：\n![在这里插入图片描述](./一篇了解 JS 的上下文(context)"),s("em",[t._v("js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客"),s("em",[t._v("files/20210425205810613.png)\n![在这里插入图片描述](./一篇了解 JS 的上下文(context)_js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客"),s("em",[t._v("files/2021042521021621.png)\n![在这里插入图片描述](./一篇了解 JS 的上下文(context)_js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客"),s("em",[t._v("files/20210425210111276.png)\n![在这里插入图片描述](./一篇了解 JS 的上下文(context)_js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客_files/20210425210152424.png)\n可以看到 foot 在声明前打印会显示“undefind”，但 ball 在声明前打印会报错显示 “ball is not defined”。两者的区别在于，后面 foot 被声明了，而 ball 至始都没有声明过。")]),t._v(" "),s("p",[t._v("那么，就抛出一个问题了，既然代码是从上到下执行，按道理来说两者都应该是“is not defined”，为什么前者会是 undefind 并且无报错执行。")]),t._v(" "),s("p",[t._v("答案就是在 js 代码执行前有个预加载阶段用来建立代码的执行环境（上下文），而建立上下文的第一个阶段就是建立当前环境声明过的变量 Variable Object。")]),t._v(" "),s("p",[t._v("我们来看下面代码所生成的上下文对象")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionfn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'脚'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("varhead")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'头'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionhand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'手'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Variable Object ：\n// VO 创建")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fnExecutionContext  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//fn函数的上下文对象VO:{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("arguments")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("hand")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("hand函数的引用地址，"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数声明")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("head")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量函数声明")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明this：Window,//this指向},")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("scopeChain")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//作用域链}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们可以看出，就跟我们刚才打印的一样，声明过的参数全部都被记录在了这个 VO 对象中，只不过 var 声明的参数值都为 undefined。\n也因此我们为什么刚才的打印会 undefined 了。")]),t._v(" "),s("p",[t._v("那么会有个疑问，为什么 function 声明的函数就有值呢，这个简称变量提升：")]),t._v(" "),s("blockquote",[s("p",[t._v("所谓的变量提升，就是在建立上下文是会把 function 声明的函数都提升到上面来，这样即时你把 function 写到下面，他依然会比你 var 声明的值更快获得实际的值。\n那么什么时候 var 声明的变量才能有值呢，这个就是 AO 的原因了。")])]),t._v(" "),s("h2",{attrs:{id:"动态变量声明-active-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态变量声明-active-object"}},[t._v("#")]),t._v(" 动态变量声明（Active Object）")]),t._v(" "),s("p",[t._v("所谓 AO 就是 Active Object 的简写，那么什么是 AO 呢，他其实就是 VO，只不过在初步建立完 VO 后，就会开始执行我们的 js 代码。\njs 代码从上到下执行的过程中，如果遇到赋值的情况，那么就会更新 VO 变成了 AO。我们来看看 AO 对象。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fnExecutionContext  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//fn函数的上下文对象AO:{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("arguments")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("hand")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("hand函数的引用地址，"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数声明")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("head")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" head函数的引用地址"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量函数声明")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'脚'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明},")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("scopeChain")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//作用域}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("是不是一下子就懂了。")]),t._v(" "),s("p",[t._v("接下来我们看 VOAO 的 arguments 参数")]),t._v(" "),s("h2",{attrs:{id:"variable-object-的-arguments-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variable-object-的-arguments-属性"}},[t._v("#")]),t._v(" Variable Object 的 arguments 属性")]),t._v(" "),s("p",[t._v("每个函数的调用，都必然存在 arguments 对象，它存在于 Variable 对象当中，接下来我们来看看 arguments 对象里面到底有些什么东西。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionshowargs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" arguments "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showargs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("打印结果如下:\n![在这里插入图片描述](./一篇了解 JS 的上下文(context)"),s("em",[t._v("js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客_files/20210418145930652.png)\n从上图可以明白，其实就是把调用这个函数时所传入的参数，通过一个类数组对象接收了。")]),t._v(" "),s("blockquote",[s("p",[t._v("类数组对象是什么意思呢，就是类似数组的对象，他没有数组的一些方法，但是他却是以{“0”:‘您好’,“1”:我好,“2”:大家好}\n这种很像数组的方式存在。")])]),t._v(" "),s("p",[t._v("除了传入的参数，我们通过 arguments.callee 还能获得当前函数的代码")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionshowcallee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这里是代码'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这是另一段代码'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showcallee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("![在这里插入图片描述](./一篇了解 JS 的上下文(context)"),s("em",[t._v("js 中的上下文是指什么")]),t._v("卡乐 C 前端的博客-CSDN 博客_files/20210418150555669.png)\n到此，arguments 对象我们就了解完毕了，他在上下文中起着，记录调用此函数时所传入的参数的作用。")]),t._v(" "),s("h2",{attrs:{id:"scopechain-作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scopechain-作用域链"}},[t._v("#")]),t._v(" scopeChain 作用域链")]),t._v(" "),s("p",[t._v("在上下文对象中，我们看到了一个 scopeChain 作用域链，那么这个作用域链有什么用呢。\n我们看如下代码：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionfn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'脚'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionfootBall")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" footBall "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'足球'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("footBall"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'需要：'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("foot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("footBall")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("从上面代码看出，函数 footBall 可以使用到函数 fn 所声明的变量 foot。\n如果没有 scopeChain，这是做不到的，scopeChain 就是充当这一角色。")]),t._v(" "),s("blockquote",[s("p",[t._v("JS 权威指南指出”JavaScript 中的函数运行在它们被定义的作用域里,而不是它们被执行的作用域里.”")])]),t._v(" "),s("blockquote",[s("p",[t._v("ECMA262 中所述 任何执行上下文时刻的作用域, 都是由作用域链(scope chain)来实现.在一个函数被定义的时候, 会将它定义时刻的 scope chain 链接到这个函数对象的[[scope]]属性.")])]),t._v(" "),s("p",[t._v("作用域链其实就是所有内部上下文的变量对象的列表。用于变量查询。比如，在上述例子中，“footBall”上下文的作用域链包含了 VO(footBall),VO(foot)和 VO(global)。")]),t._v(" "),s("p",[t._v("看完上面的概念，我们可能会有点懵，接下来我们看下这个 footBall 的上下文对象。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("footBallExecutionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("arguments")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("footBall")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明this: fn,")]),t._v("\n  \t\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("scopeChain")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("footBall函数的"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn函数的"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("VOGlobal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("全局的"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//作用域链}.....}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("可以看出来 footBall 的 VO 对象是没有 foot 的变量声明，那为什么执行下来不会报错，而且还有值呢。\n这就是 scopeChain 的意义了，如果在当前 VO 找不到相关的定义，便会通过 scopeChain 对象找父级的 VO，找不到就再往上找，直到全局的 VO。所以当 footBall 的 VO 对象里没有 foot 的定义时，便会去找父级的 VO 也就是 fn 函数的 VO，在 fn 函数里有 foot 的定义。")]),t._v(" "),s("p",[t._v("如此下来，整个上下文就讲完啦。简单来说就是一个执行代码的环境，但细讲会发觉他有好多的属性，这都是为了在执行每一段 js 代码时都能有序，无误的执行。不得不赞叹，语言类的开发者真的要顾全很多的东西。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),s("p",[t._v("一个 js 的代码的执行顺序简单来讲是两步")]),t._v(" "),s("blockquote",[s("p",[t._v("1.建立当前所要执行的 js 代码的执行环境，简称上下文。 2.从上到下一次执行代码。")])]),t._v(" "),s("blockquote",[s("p",[t._v("参考文献:https://blog.51cto.com/enjoyjava/1124940\n参考文献:https://www.tensweets.com/article/5ba71b42f0cb0c04f86b23dd\njs 代码的执行顺序参考文献：https://www.jb51.net/article/127025.htm")])])])}),[],!1,null,null,null);s.default=e.exports}}]);