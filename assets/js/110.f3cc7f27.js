(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{464:function(e,t,r){"use strict";r.r(t);var a=r(6),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"electron是什么及它的优势-摘自网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron是什么及它的优势-摘自网络"}},[e._v("#")]),e._v(" Electron是什么及它的优势 （摘自网络）")]),e._v(" "),t("h3",{attrs:{id:"electron简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron简介"}},[e._v("#")]),e._v(" Electron简介")]),e._v(" "),t("p",[e._v("Electron 是是 GitHub 开发的一个开源框架。它允许使用 Node.js（作为后端）和 Chromium（作为前端）完成桌面 GUI 应用程序的开发。")]),e._v(" "),t("p",[e._v("Electron 可以用于构建具有 html、css、JAVAScript 的跨平台桌面应用程序，它通过将 Chromium 和 node.js 合同一个运行的环境中来实现这一点，应用程序可以打包到 mac、windows 和 linux 系统")]),e._v(" "),t("p",[e._v("Electron为前端技术人员利用web前端技术开发桌面应用带来了可能，开发人员可利用已经掌握的前端技术如Html、CSS、JavaScript，以及结合一些前端技术框架：Vue、Angular、React、webpack，加之浏览器渲染引擎、Electron封装的系统API快速实现一款桌面应用的开发，Electron做了大部分复杂的工作，开发人员只需要专注在核心业务和前端技术本身。同时，通过一定的优化，Electron可以做到很好的体验。")]),e._v(" "),t("h3",{attrs:{id:"支持平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#支持平台"}},[e._v("#")]),e._v(" 支持平台")]),e._v(" "),t("p",[e._v("目前支持 Electron 的平台有 OS X、Windows、Linux：")]),e._v(" "),t("ul",[t("li",[e._v("OS X：对于 OS X 系统仅有 64 位的二进制文档，支持的最低版本是 OS X 10.8。")]),e._v(" "),t("li",[e._v("Windows：仅支持 Windows 7 及其以后的版本，之前的版本中是不能工作的。对于 Windows 提供 x86 和 amd64 (x64) 版本的二进制文件。需要注意的是 ARM 版本的 Windows 目前尚不支持。")]),e._v(" "),t("li",[e._v("Linux：预编译的 ia32(i686) 和 x64(amd64) 版本 Electron 二进制文件都是在 Ubuntu 12.04 下编译的，arm 版的二进制文件是在 ARM v7（硬浮点 ABI 与 Debian Wheezy 版本的 NEON）下完成的。预编译二进制文件是否能够运行，取决于其中是否包括了编译平台链接的库，所以只有 Ubuntu 12.04 可以保证正常工作，但是 Ubuntu 12.04+ 、Fedora 21、Debian 8 等平台也被证实可以运行 Electron 的预编译版。")])]),e._v(" "),t("h3",{attrs:{id:"electron的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron的优缺点"}},[e._v("#")]),e._v(" Electron的优缺点")]),e._v(" "),t("p",[e._v("Electron 的优点如下所示：")]),e._v(" "),t("ul",[t("li",[e._v("部署升级方便，用户可以通过浏览器就可以访问。")]),e._v(" "),t("li",[e._v("HTML/JS/CSS 编写，方便且高效。")]),e._v(" "),t("li",[e._v("可支持 Windows、Linux 、Mac系统。")]),e._v(" "),t("li",[e._v("可让js 前端的生态融入进来，让开发员有大量的模块和资源可用（类似python第三方库、 vscode插件）")])]),e._v(" "),t("p",[e._v("Electron 的缺点如下所示：")]),e._v(" "),t("ul",[t("li",[e._v("对于开发者而言：浏览器适配比较繁琐。有些应用必须指定浏览器版本（比如 OCX 必须是 IE 内核， H5 必须是较高版本），必须打开浏览器，输入一长串 URL 地址。")]),e._v(" "),t("li",[e._v("打包体积大：一个小应用打包下来可能就需要几十兆，不过目前磁盘存储已经不是什么大问题，随着网路环境越来越好，磁盘容积也越来越大，这个问题给用户带来的负担越来越不明显，几乎可以忽略。")]),e._v(" "),t("li",[e._v("占用内存较在：一般50M起步，多数要100-400M,新版不知道有否优化。毕竟开的是浏览器，有点重。")]),e._v(" "),t("li",[e._v("性能有延迟：在100多ms以上，没有Winform 那么快。")]),e._v(" "),t("li",[e._v("开发有一定复杂度：除需要掌握必要的前端知识外，基于Electron开发仍需要了解跨进程通信的一些知识点，进程上的一些问题往往还是容易给开发者带来一定的困惑，有一定的学习成本，但是通过系统学习还是容易攻克的。")]),e._v(" "),t("li",[e._v("版本更新快：它是基于Chromium的，所以Electron跟随Chromium的版本发布节奏，版本迭代较快，这可能会导致一些兼容问题，但幸运的是目前Electron的核心功能一直都算是很稳定的。")]),e._v(" "),t("li",[e._v("安全问题：Electron提供给了开发人员足够的便利，同时也有一些具有风险的开关，开发者需要在开发中妥善处理，避免对应用客户带来安全隐患，开发人员需要关注安全问题。")]),e._v(" "),t("li",[e._v("对于传统C/S桌面客户端开发者：对 web 应用不习惯，尤其是使用专业c# Delphi 软件，大多数会觉得 web 应用没有桌面应用方便或强大。")])]),e._v(" "),t("h3",{attrs:{id:"electron开发桌面程序需要的前端技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron开发桌面程序需要的前端技术"}},[e._v("#")]),e._v(" Electron开发桌面程序需要的前端技术")]),e._v(" "),t("p",[e._v("Electron是基于Chromium和Node.js实现的，所以开发人员所需要使用到的前端技术主要包括以下方面：")]),e._v(" "),t("p",[e._v("1、Html、CSS、JavaScript、ES6")]),e._v(" "),t("p",[e._v("2、前端开发工具Vue、Angular、React等的一种")]),e._v(" "),t("p",[e._v("3、其他网络、缓存、通讯、系统、跟踪等前端技术")]),e._v(" "),t("p",[e._v("4、对Vscode编辑器的熟悉")]),e._v(" "),t("h3",{attrs:{id:"基于electron实现的软件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于electron实现的软件"}},[e._v("#")]),e._v(" 基于Electron实现的软件")]),e._v(" "),t("p",[e._v("Electron 现已被多个开源应用软件所使用，其中被广大所熟知和使用的 Atom 、MongoDB桌面版管理工具、Skype桌面版、WhatsApp桌面版、HTTP网络测试工具Postman 、接口管理软件ApiFox 、WhatsAp、Teams、支付宝小程序IDE、 开发人员熟知的Visual Studio Code编辑器就是基于 Electron 实现的。案例将来还会更多。")]),e._v(" "),t("h2",{attrs:{id:"一、搭electron"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、搭electron"}},[e._v("#")]),e._v(" 一、搭Electron")]),e._v(" "),t("h3",{attrs:{id:"_1、使用克隆库来搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用克隆库来搭建"}},[e._v("#")]),e._v(" 1、使用克隆库来搭建")]),e._v(" "),t("p",[e._v("1）安装git")]),e._v(" "),t("p",[e._v("要先安装git ,安装git, 在任何目录右键 就有相关的命令 文件资源管理器 直接 敲 cmd 随时在当前目录下克隆来创建项目")]),e._v(" "),t("p",[e._v("2）克隆项目")]),e._v(" "),t("p",[e._v("然后git clone "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/electron/electron-quick-start",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/electron/electron-quick-start"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("3）安装依赖")]),e._v(" "),t("p",[e._v("克隆后再：cd electron-quick-start")]),e._v(" "),t("p",[e._v("安装依赖并运行（主要是针对package.json 里面的 DevDependencies 这段里面的依赖配置） npm install && npm start 或者 直接  cnpm i    (一定要先进入到项目目录，是针对当前文件夹来的） 也可直接下载 Download Zip源码包下来再解压到你指定的文件夹下面")]),e._v(" "),t("p",[e._v("4）运行项目")]),e._v(" "),t("p",[e._v('运行：在package.json 里  Scripts 段里有 一个  start  它模拟 "electron ." 来运行 相当于把 "electron ." 封装成 start 这个命令了。 所以可以    通过： npm start /cnpm start来运行  （npm 是node.js里的）')]),e._v(" "),t("p",[e._v("可看到控制台里 显示 实际执行的是 electron . node_modules :各种依赖库模块 Ct+C 结束运行 Preload.js 是在main.js 讲程创建window时加载的 写在webPreferences 里 监听了DOMContentLoaded事件 使用replacetext来替换 index.html 按指定ID找到几个版本文本 renderer.js 渲染进程 （与index.html 一起组成渲染进程 index.html 引用了 "),t("code",[e._v('<script src="./renderer.js"><\/script>')])]),e._v(" "),t("h3",{attrs:{id:"_2、使用electron-forge-锻造-脚手架来搭建-项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用electron-forge-锻造-脚手架来搭建-项目"}},[e._v("#")]),e._v(" 2、使用electron-forge(锻造) 脚手架来搭建 项目")]),e._v(" "),t("ol",[t("li",[e._v("npx是node.js 新版 支持的命令")])]),e._v(" "),t("p",[e._v("npx create-electron-app my-new-app  (推荐用这个) 或 yarn  create-electron-app my-new-app")]),e._v(" "),t("p",[e._v("npx相当于多步传统的方式 npm install -g @electron-forge/cli  (安装脚手架） 或 cnpm安装 electron-forge init my-new-app cd my-new-app npm start")]),e._v(" "),t("p",[e._v("但npx使用的是npm 可能下载慢或下载不了，可考虑使用cnpm npx运行时控制台可看到简洁的安装过程，最后一步是安装相关的依赖")]),e._v(" "),t("p",[e._v("2）使用Vscode打开项目")]),e._v(" "),t("p",[e._v("项目下载或克隆后，使用Vscode编辑器来打开 生成以下文件会放在src目录下： index.js  主进程 index.html 渲染进程 index.css  index.html用到的css")]),e._v(" "),t("p",[e._v("3）运行项目")]),e._v(" "),t("p",[e._v('打开package.json 在scripts节中可看到 "start" : "electron-forge start", 所以你可以使用npm start 来运行 同理，可使用 npm make 来生成exe文件')]),e._v(" "),t("p",[e._v("4）关闭DevTools")]),e._v(" "),t("p",[e._v("运行可看到打开了调试工具 这个是在index.js 主进程的 createWindow 最后使用了一句 mainWindow.webContents.openDevTools();")]),e._v(" "),t("p",[e._v("5）渲染进程重载网页")]),e._v(" "),t("p",[e._v("改完index.html 或index.css后，可以不中止，直接在view-reload 重新加载网页")]),e._v(" "),t("h3",{attrs:{id:"_3、手工写代码来搭建electron项目-更好理解代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、手工写代码来搭建electron项目-更好理解代码"}},[e._v("#")]),e._v(" 3、手工写代码来搭建Electron项目，更好理解代码")]),e._v(" "),t("p",[e._v("1）手工创建新项目")]),e._v(" "),t("p",[e._v("先创建项目目录，不能有空格，不能有中文 在vscode 打开这个目录")]),e._v(" "),t("p",[e._v("2）新建3个文件 index.html index.css index.js")]),e._v(" "),t("p",[e._v("在index.html文件中，输入html:5 可产生一个基本的html框架 或 !+Tab键 也可以（必须是html文件中，js文件中不行） 输入div或html+tab (不用 "),t("code",[e._v("<div>")]),e._v("也可) 再新建main.js 右键 在文件资源管理器打开，再在上面输入cmd  就会自动到达这个目录的命令行 输入 npm init --yes  回车，它就会在当前目录下生成 package.json文件 它会自动找main.js 入口，并配置好入口")]),e._v(" "),t("p",[e._v("也可手工再编辑修改package.json的内容")]),e._v(" "),t("p",[e._v("3）在当前项目安装一下Electron（开发环境）")]),e._v(" "),t("p",[e._v("虽然我们全局已安装了electron ,但输入 electron. 没有代码自动补齐或提示 需要在Vscode 再用cnpm i electron --save-dev 再安装一次, 把它写到package.json中的devDependencies中 依赖里 这样再敲 electron. 代码就会自动提示了 所以建议在项目里面安装一次这个模块")]),e._v(" "),t("p",[e._v("4）Require electron")]),e._v(" "),t("p",[e._v('再引用  const {app,BroserWindow}=require("electron")')]),e._v(" "),t("p",[e._v("5）app添加监听ready事件")]),e._v(" "),t("p",[e._v("再监听应用的 启动事件。需要 事件名 及回调函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('app.on("ready",()=>{constmainWindows=newBrowserWindows({width:600,height:400})\n')])])]),t("p",[e._v("mainWindow.loadFile(path.join(dirname,'index.html'));  //path.join  dirname 都是node.js的")]),e._v(" "),t("p",[e._v("electron可直接引用node.js里面的东西")]),e._v(" "),t("p",[e._v("在前面要先引用 const path=require('path'); //mainWindow.loadUrl('"),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com"),t("OutboundLink")],1),e._v("'); }")]),e._v(" "),t("h2",{attrs:{id:"二、开发工具中配置eslint-js代码检测工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、开发工具中配置eslint-js代码检测工具"}},[e._v("#")]),e._v(" 二、开发工具中配置Eslint (js代码检测工具）")]),e._v(" "),t("h3",{attrs:{id:"_1、安装eslint-插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、安装eslint-插件"}},[e._v("#")]),e._v(" 1、安装Eslint 插件")]),e._v(" "),t("p",[e._v("ESLint（有时发音为Easy Lint）是一种静态代码分析工具，用于识别JavaScript代码中发现的有问题的模式,可配置")]),e._v(" "),t("p",[e._v("安装此插件后，代码敲错，会有提示 安装：cnpm install -g eslint   （全局安装不需要注重目录）")]),e._v(" "),t("h3",{attrs:{id:"_2、项目中配置eslint插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、项目中配置eslint插件"}},[e._v("#")]),e._v(" 2、项目中配置Eslint插件")]),e._v(" "),t("p",[e._v("cd 到项目的目录 终端下运行：eslint --init 1）选择3种方式，只查找问题，....  ，第3种可强制修改你的格式  （也可右键格式化你的代码 shift+alt+f） 2）再问你是在 javascript modules(import/export) 还是 CommonJS(require/exports) 使用 ，选择这个 （node.js使用是require)")]),e._v(" "),t("p",[e._v("3)再问你是在 React Vue.js None of these (选择这个）")]),e._v(" "),t("p",[e._v("4)然后问你是否使用TypeScript, 选择No")]),e._v(" "),t("p",[e._v("会生成一个 .eslintrc.js 配置文件 （其实就是我们刚才选择的配置）")]),e._v(" "),t("p",[e._v("再回到刚才 错误代码，就有提示了 就是你虽然全局安装了，但需要用eslint --init 在当前项目中使用（其实就是生成一个.eslintrc.js配置文件）")]),e._v(" "),t("p",[e._v("5)使用node 来运行 js文件 随便创建一个文件，内容为 console.log(process.platform) 在终端输入 ：node  test.js 就可运行 得到是 win32  (windows平台）")]),e._v(" "),t("h2",{attrs:{id:"三、electron的运行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、electron的运行流程"}},[e._v("#")]),e._v(" 三、electron的运行流程")]),e._v(" "),t("p",[e._v("运行electron项目是执行命令：electron .")]),e._v(" "),t("h3",{attrs:{id:"_1、它先找项目中的package-json中的入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、它先找项目中的package-json中的入口"}},[e._v("#")]),e._v(" 1、它先找项目中的package.json中的入口")]),e._v(" "),t("p",[e._v('找到 "main": "main.js", 加载这个主进程 它实例化 BrowserWindow  ，也就创建了一个渲染进程 它再加载本地的index.html 文件  （html css ) 展示给用户这个应用的页面 再使用IPC 去完成任务 并从主进程得到信息')]),e._v(" "),t("h3",{attrs:{id:"_2、主进程与渲染进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、主进程与渲染进程"}},[e._v("#")]),e._v(" 2、主进程与渲染进程")]),e._v(" "),t("p",[e._v("一个electron应用只有一个主进程，但可以有多个渲染进程，每个Electron中的web页面运行在它自己的渲染进程里")]),e._v(" "),t("h3",{attrs:{id:"_3、进程与线程的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、进程与线程的区别"}},[e._v("#")]),e._v(" 3、进程与线程的区别")]),e._v(" "),t("p",[e._v("进程(Process) ：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调试的基本单位 ，是操作系统结构的基础 线程(Thread）： 在一一个程序里的一个执行路线就叫做线程（thread), 更准确的定义是：线程是”一个进程内部的控制序列“ 线程和进程：一个程序至少有一个进程，一个进程至少有一个线程")]),e._v(" "),t("h3",{attrs:{id:"_4、可在new-browserwindow-时增加属性-parent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、可在new-browserwindow-时增加属性-parent"}},[e._v("#")]),e._v(" 4、可在new BrowserWindow 时增加属性 parent:")]),e._v(" "),t("p",[e._v("设置窗体的父窗体")]),e._v(" "),t("h3",{attrs:{id:"_5、在主进程和渲染进程里修改内容怎么刷新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、在主进程和渲染进程里修改内容怎么刷新"}},[e._v("#")]),e._v(" 5、在主进程和渲染进程里修改内容怎么刷新")]),e._v(" "),t("p",[e._v("在主进程里修改东西，必须重新运行 electron .")]),e._v(" "),t("p",[e._v("在渲染进程里改东西，可以使用网页-View-Force Reload 来刷新")]),e._v(" "),t("h3",{attrs:{id:"_6、如何在主进程和渲染进程中使用nodejs模块及nodejs第三方模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、如何在主进程和渲染进程中使用nodejs模块及nodejs第三方模块"}},[e._v("#")]),e._v(" 6、如何在主进程和渲染进程中使用nodejs模块及NodeJs第三方模块")]),e._v(" "),t("p",[e._v("主进程中无需任何配置就可使用Nodejs模块")]),e._v(" "),t("p",[e._v('const fs=require("fs") 主进程打印console.log 需要在终端里看，而不是在浏览器时里的开发工具里的console里看 （DevTools)')]),e._v(" "),t("p",[e._v('渲染进程：第一种方法: preload 加载的可直接使用 在 new BrowserWindow(查看官网它的详细参数） 时 使用 webPreferences:{ preload:path.join(__dirname,"renderer/preload.js") BrowserWindow通过preload.js 可直接使用nodejs模块')]),e._v(" "),t("p",[e._v("第二种方法：不在preload加载的 如果要在index.html 引用Nodejs的模块 如 index.html里加了 "),t("code",[e._v('<script src="rederer.js"><\/script>')]),e._v(" 在rederer.js 中如果使用 require 就会出错。 必须在main.js 中的创建这个渲染进程 new BrowserWindow (对应那个index.html) 加上下面配置 webPreferences:{     nodeIntegration: true,     contextIsolation: false")]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("h3",{attrs:{id:"_7、加个按钮来显示调用文件的内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、加个按钮来显示调用文件的内容"}},[e._v("#")]),e._v(" 7、加个按钮来显示调用文件的内容")]),e._v(" "),t("p",[e._v("1、在index.html 增加个按钮 "),t("code",[e._v('<button id="opednFile">')]),e._v("打开 "),t("code",[e._v("</button>")])]),e._v(" "),t("p",[e._v("2、再定义  "),t("code",[e._v('<div id="content">')]),e._v("  //将来最好改成textArea ，代码显示更美观一些")]),e._v(" "),t("p",[e._v("3、再为 div 增加个样式")]),e._v(" "),t("p",[e._v("4、在renderer.js中要监听按钮单击事件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("window.onload=()=>{contentDom=document.querySelector('#openFile')openFileDom=document.querySelector('#content')openFileDom.onclick=()=>{alert('test')constfs=require('fso')fs.readFile('package.json',(err,data)=>{if(err){console.log(err)return}console.log(data.toString())contentDom.innerHTML=data.toString()})}}\n")])])]),t("h2",{attrs:{id:"四、调用h5里的拖放api-及nodejs实现文件拖放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、调用h5里的拖放api-及nodejs实现文件拖放"}},[e._v("#")]),e._v(" 四、调用h5里的拖放Api 及Nodejs实现文件拖放")]),e._v(" "),t("h3",{attrs:{id:"_1、在窗体的-onload-设置-ondragenter-ondrop等事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、在窗体的-onload-设置-ondragenter-ondrop等事件"}},[e._v("#")]),e._v(" 1、在窗体的 onload 设置 ondragenter ondrop等事件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("window.onload=()=>{varcontentDom=document.querySelector('#content')// =function() 可改成箭头函数 =()=>\n//阻止这些事件的默认行为\ncontentDom.ondragenter=contentDom.ondragover=contentDom.ondragleave=()=>{returnfalse}contentDom.ondrop=(e)=>{// console.log(e)\nconsole.log(e.dataTransfer.files[0].path)}}\n")])])]),t("h3",{attrs:{id:"_2、electron-进程图-摘自-kevin5979"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、electron-进程图-摘自-kevin5979"}},[e._v("#")]),e._v(" 2、electron 进程图 （摘自 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/c2bb618ec741",target:"_blank",rel:"noopener noreferrer"}},[e._v("kevin5979"),t("OutboundLink")],1),e._v("）")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/v2-31e0f73200ef4ff85b154a940c4edeac_b.jpg",alt:""}}),e._v("\n![](C:/Users/ON/Desktop/Electron跨平台桌面应用程序开发框架入门简介及学习笔记 - 知乎_files/v2-31e0f73200ef4ff85b154a940c4edeac_720w.webp)")]),e._v(" "),t("h3",{attrs:{id:"主进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主进程"}},[e._v("#")]),e._v(" 主进程")]),e._v(" "),t("h3",{attrs:{id:"什么是electron主进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是electron主进程"}},[e._v("#")]),e._v(" 什么是electron主进程?")]),e._v(" "),t("ul",[t("li",[e._v("electron 运行 "),t("code",[e._v("package.json")]),e._v("的 "),t("code",[e._v("main")]),e._v("脚本的进程被称作主进程")])]),e._v(" "),t("h3",{attrs:{id:"electron主进程的相关-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron主进程的相关-作用"}},[e._v("#")]),e._v(" electron主进程的相关/作用")]),e._v(" "),t("ul",[t("li",[e._v("每个electron只有一个主进程")]),e._v(" "),t("li",[e._v("用于管理原生GUI， 典型的窗口（BrowserWindow、Tray、Dock、Menu）")]),e._v(" "),t("li",[e._v("主进程用于创建渲染进程")]),e._v(" "),t("li",[e._v("主进程控制应用的生命周期")])]),e._v(" "),t("p",[e._v("简单的说，electron项目的主进程只有一个, 主进程的执行代码需要写到main.js中, 起到统筹全局的作用")]),e._v(" "),t("h3",{attrs:{id:"渲染进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[e._v("#")]),e._v(" 渲染进程")]),e._v(" "),t("h3",{attrs:{id:"什么是electron渲染进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是electron渲染进程"}},[e._v("#")]),e._v(" 什么是electron渲染进程?")]),e._v(" "),t("ul",[t("li",[e._v("electron 展示web页面的进程被称作主进程")])]),e._v(" "),t("h3",{attrs:{id:"electron主进程的相关-作用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron主进程的相关-作用-2"}},[e._v("#")]),e._v(" electron主进程的相关/作用")]),e._v(" "),t("ul",[t("li",[e._v("通过Node.js、Electron提供的API与系统底层打交道")]),e._v(" "),t("li",[e._v("一个electron可以有多个渲染进程")])]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"主进程-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主进程-api"}},[e._v("#")]),e._v(" 主进程 API")]),e._v(" "),t("ul",[t("li",[e._v("app ：控制应用的事件生命周期")]),e._v(" "),t("li",[e._v("autoUpdater ：自动更新")]),e._v(" "),t("li",[e._v("BrowserView ：创建和控制视图")]),e._v(" "),t("li",[e._v("BrowserWindow ：创建和控制窗口")]),e._v(" "),t("li",[e._v("contentTracing ：跟踪并确定性能问题")]),e._v(" "),t("li",[e._v("dialog ：创建和控制本机系统对话框")]),e._v(" "),t("li",[e._v("globalShortcut ：监听系统快捷键")]),e._v(" "),t("li",[e._v("inAppPurchase ：（MAC专用）Mac App Store 的应用内购买")]),e._v(" "),t("li",[e._v("ipcMain ：从主模块到渲染模块（ipcRenderer）的异步通信")]),e._v(" "),t("li",[e._v("Menu ：创建远程应用以及上下文菜单")]),e._v(" "),t("li",[e._v("MenuItem ：在菜单中添加菜单项")]),e._v(" "),t("li",[e._v("net ：发出 HTTP或 HTTPS请求")]),e._v(" "),t("li",[e._v("netLog ：记录网络事件")]),e._v(" "),t("li",[e._v("Notification ：创建桌面通知")]),e._v(" "),t("li",[e._v("powerMonitor ：监视电源状态")]),e._v(" "),t("li",[e._v("powerSaveBlocker ：组织系统自动进入省电模式")]),e._v(" "),t("li",[e._v("protocol ：注册自定义协议并拦截基于协议的请求")]),e._v(" "),t("li",[e._v("screen ：检索有关屏幕大小、显示器、光标位置等的信息")]),e._v(" "),t("li",[e._v("session ：管理浏览器会话、 cookie 、缓存、代理设置等")]),e._v(" "),t("li",[e._v("systemPreferences ：获取系统配置信息")]),e._v(" "),t("li",[e._v("TouchBar ：（MAC专用）配置 TouchBar布局")]),e._v(" "),t("li",[e._v("Tray ：添加图标和上下文菜单到系统通知区")]),e._v(" "),t("li",[e._v("webContents ：渲染以及控制 web页面")])]),e._v(" "),t("h3",{attrs:{id:"渲染进程-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程-api"}},[e._v("#")]),e._v(" 渲染进程 API")]),e._v(" "),t("ul",[t("li",[e._v("ipcRenderer ：从渲染器进程到主进程的异步通信")]),e._v(" "),t("li",[e._v("remote ：在渲染进程中使用主进程模块")]),e._v(" "),t("li",[e._v("webFrame ：自定义渲染当前网页")]),e._v(" "),t("li",[e._v("desktopCapturer ：通过 [navigator.mediaDevices.getUserMedia] API ，可以访问那些用于从桌面上捕获音频和视频的媒体源信息")])]),e._v(" "),t("h3",{attrs:{id:"通用-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用-api"}},[e._v("#")]),e._v(" 通用 API")]),e._v(" "),t("ul",[t("li",[e._v("clipboard ：在系统剪贴板上执行复制和粘贴操作")]),e._v(" "),t("li",[e._v("crashReporter ：将崩溃日志提交给远程服务器")]),e._v(" "),t("li",[e._v("nativeImage ：使用 PNG或 JPG  文件创建托盘、 dock和应用程序图标")]),e._v(" "),t("li",[e._v("shell ：使用默认应用程序管理文件和 url")])]),e._v(" "),t("h3",{attrs:{id:"_3、主进程、渲染进程可用模块-及2个进程中都可使用模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、主进程、渲染进程可用模块-及2个进程中都可使用模块"}},[e._v("#")]),e._v(" 3、主进程、渲染进程可用模块  及2个进程中都可使用模块")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/v2-83b273f02473a524c93e6a77a4c5c030_b.jpg",alt:""}}),e._v("\n![](C:/Users/ON/Desktop/Electron跨平台桌面应用程序开发框架入门简介及学习笔记 - 知乎_files/v2-83b273f02473a524c93e6a77a4c5c030_720w.jpg)")]),e._v(" "),t("p",[e._v("进程关系图")]),e._v(" "),t("p",[e._v("有些功能可以使用nodejs模块 或h5 api 来实现")]),e._v(" "),t("p",[e._v("但像 菜单 托盘等这些就只能是通过electron api(或模块）来实现")])])}),[],!1,null,null,null);t.default=n.exports}}]);